# -*- mode: text; coding: utf-8; tab-width: 4; -*-

##################################################
TYPEMAP

Algorithm*							O_OBJECT
Feature2D*							O_OBJECT
FeatureDetector*					O_OBJECT
DescriptorExtractor*				O_OBJECT
DescriptorMatcher*					O_OBJECT

PyramidAdaptedFeatureDetector*		O_OBJECT
DynamicAdaptedFeatureDetector*		O_OBJECT
AdjusterAdapter*					O_OBJECT
FastAdjuster*						O_OBJECT
StarAdjuster*						O_OBJECT
SurfAdjuster*						O_OBJECT
FlannBasedMatcher*					O_OBJECT
BFMatcher*							O_OBJECT

MatV								T_MatV
KeyPointV							T_KeyPointV
KeyPointVV							T_KeyPointVV
DMatchV								T_DMatchV
DMatchVV							T_DMatchVV

##################################################
INPUT

O_OBJECT
	if (sv_isobject($arg) && (SvTYPE(SvRV($arg)) == SVt_PVMG))
		$var = ($type)SvIV((SV*)SvRV($arg));
	else
		Perl_croak(aTHX_ \"%s is not of type %s in %s\",
			\"$var\", \"@{(my $t = $type) =~ s/\bconst\s+//g; [$t]}\", \"$pname\")

T_MatV
	STMT_START {
		if (SvROK($arg) && SvTYPE(SvRV($arg)) == SVt_PVAV) {
			AV* av = (AV*)SvRV($arg);
			for (int i = 0; i <= av_len(av); i++) {
				SV* p = (SV*)*av_fetch(av, i, 0);
				if (SvROK(p) && sv_derived_from(p, \"Cv::Arr\")) {
					CvArr* arr = INT2PTR(CvArr*, SvIV((SV*)SvRV(p)));
					$var.push_back(cvarrToMat(arr));
				} else
					Perl_croak(aTHX_ \"%s is not of type %s in %s\",
						\"$var\", \"$type\", \"$pname\");
			}
		} else
			Perl_croak(aTHX_ \"%s is not of type %s in %s\",
				\"$var\", \"$type\", \"$pname\");
	} STMT_END

T_KeyPointV
	STMT_START {
		SV* const sv = $arg; AV* av;
		SvGETMAGIC(sv);
		if (SvROK(sv) && SvTYPE(SvRV(sv)) == SVt_PVAV){
		    av = (AV*)SvRV(sv);
		} else{
		    Perl_croak(aTHX_ \"%s is not an ARRAY reference in %s\",
				\"$var\",
				${$ALIAS?\q[GvNAME(CvGV(cv))]:\qq[\"$pname\"]}
				);
		}
		for (int i = 0; i <= av_len(av); i++) {
			SV* sv_keypoint = (SV*)*av_fetch(av, i, 0);
			AV* av_keypoint = (AV*)SvRV(sv_keypoint);
			SV* sv_pt       = (SV*)*av_fetch(av_keypoint, 0, 0);
			SV* sv_size     = (SV*)*av_fetch(av_keypoint, 1, 0);
			SV* sv_angle    = (SV*)*av_fetch(av_keypoint, 2, 0);
			SV* sv_response = (SV*)*av_fetch(av_keypoint, 3, 0);
			SV* sv_octave   = (SV*)*av_fetch(av_keypoint, 4, 0);
			SV* sv_classId  = (SV*)*av_fetch(av_keypoint, 5, 0);
			AV* av_pt       = (AV*)SvRV(sv_pt);
			SV* sv_pt_x     = (SV*)*av_fetch(av_pt, 0, 0);
			SV* sv_pt_y     = (SV*)*av_fetch(av_pt, 1, 0);
			${var}.push_back(
				KeyPoint(
					Point2f(SvNV(sv_pt_x), SvNV(sv_pt_y)),
					SvNV(sv_size), SvNV(sv_angle), SvNV(sv_response),
					SvIV(sv_octave), SvIV(sv_classId)
					)
				);
		}
	} STMT_END

T_DMatchV
	STMT_START {
		SV* const sv = $arg; AV* av;
		SvGETMAGIC(sv);
		if (SvROK(sv) && SvTYPE(SvRV(sv)) == SVt_PVAV){
		    av = (AV*)SvRV(sv);
		} else{
		    Perl_croak(aTHX_ \"%s is not an ARRAY reference in %s\",
				\"$var\",
				${$ALIAS?\q[GvNAME(CvGV(cv))]:\qq[\"$pname\"]}
				);
		}
		for (int i = 0; i <= av_len(av); i++) {
			SV* sv_dmatch = (SV*)*av_fetch(av, i, 0);
			AV* av_dmatch = (AV*)SvRV(sv_dmatch);
			SV* sv_queryIdx = (SV*)*av_fetch(av_dmatch, 0, 0);
			SV* sv_trainIdx = (SV*)*av_fetch(av_dmatch, 1, 0);
			SV* sv_imgIdx   = (SV*)*av_fetch(av_dmatch, 2, 0);
			SV* sv_distance = (SV*)*av_fetch(av_dmatch, 3, 0);
			${var}.push_back(
				DMatch(
					SvIV(sv_queryIdx),
					SvIV(sv_trainIdx),
					SvIV(sv_imgIdx),
					SvNV(sv_distance))
				);
		}
	} STMT_END


##################################################
OUTPUT

O_OBJECT
	sv_setref_pv($arg, CLASS, (void*)$var);

T_MatV
	STMT_START {
		AV* av = newAV(); int n = ${var}.size();
		for (int i = 0; i < n; i++) {
			CvMat* cvmat = cvCreateMatHeader(
				${var}[i].rows, ${var}[i].cols, ${var}[i].flags);
			cvSetData(cvmat, ${var}[i].data, CV_AUTOSTEP);
			SV* sv = sv_newmortal();
			sv_setref_pv(sv, \"Cv::Mat\", (void*)cvmat);
		}
		$arg = newRV((SV*)av);
		sv_2mortal($arg);
	} STMT_END;

T_KeyPointV
	STMT_START {
		AV* av;
		if (SvROK($arg) && SvTYPE(SvRV($arg)) == SVt_PVAV) {
			av = (AV*)SvRV($arg);
			av_clear(av);
		} else {
			av = newAV();
			sv_setsv($arg, sv_2mortal(newRV_inc(sv_2mortal((SV*)av))));
		}
		int n = $var.size();
		for (int i = 0; i < n; i++) {
			AV* av_kpt = newAV();
			AV* av_pt = newAV();
			av_push(av_pt, newSVnv(${var}[i].pt.x));
			av_push(av_pt, newSVnv(${var}[i].pt.y));
			av_push(av_kpt, newRV_inc(sv_2mortal((SV*)av_pt)));
			av_push(av_kpt, newSVnv(${var}[i].size));
			av_push(av_kpt, newSVnv(${var}[i].angle));
			av_push(av_kpt, newSVnv(${var}[i].response));
			av_push(av_kpt, newSViv(${var}[i].octave));
			av_push(av_kpt, newSViv(${var}[i].class_id));
			av_push(av, newRV_inc(sv_2mortal((SV*)av_kpt)));
		}
	} STMT_END;

T_KeyPointVV
	STMT_START {
		AV* av;
		if (SvROK($arg) && SvTYPE(SvRV($arg)) == SVt_PVAV) {
			av = (AV*)SvRV($arg);
			av_clear(av);
		} else {
			av = newAV();
			sv_setsv($arg, sv_2mortal(newRV_inc(sv_2mortal((SV*)av))));
		}
		int n = $var.size();
		for (int i = 0; i < n; i++) {
			int m = ${var}[i].size();
			AV* av_vector = newAV();
			for (int j = 0; j < m; j++) {
				AV* av_kpt = newAV();
				AV* av_pt = newAV();
				av_push(av_pt, newSVnv(${var}[i][j].pt.x));
				av_push(av_pt, newSVnv(${var}[i][j].pt.y));
				av_push(av_kpt, newRV_inc(sv_2mortal((SV*)av_pt)));
				av_push(av_kpt, newSVnv(${var}[i][j].size));
				av_push(av_kpt, newSVnv(${var}[i][j].angle));
				av_push(av_kpt, newSVnv(${var}[i][j].response));
				av_push(av_kpt, newSViv(${var}[i][j].octave));
				av_push(av_kpt, newSViv(${var}[i][j].class_id));
				av_push(av_vector, newRV_inc(sv_2mortal((SV*)av_kpt)));
			}
			av_push(av, newRV_inc(sv_2mortal((SV*)av_vector)));
		}
	} STMT_END;

T_DMatchV
	STMT_START {
		AV* av;
		if (SvROK($arg) && SvTYPE(SvRV($arg)) == SVt_PVAV) {
			av = (AV*)SvRV($arg);
			av_clear(av);
		} else {
			av = newAV();
			sv_setsv($arg, sv_2mortal(newRV_inc(sv_2mortal((SV*)av))));
		}
		int n = $var.size();
		for (int i = 0; i < n; i++) {
			AV* av_dmatch = newAV();
			av_push(av_dmatch, newSViv(${var}[i].queryIdx));
			av_push(av_dmatch, newSViv(${var}[i].trainIdx));
			av_push(av_dmatch, newSViv(${var}[i].imgIdx));
			av_push(av_dmatch, newSVnv(${var}[i].distance));
			av_push(av, newRV_inc(sv_2mortal((SV*)av_dmatch)));
		}
	} STMT_END;

T_DMatchVV
	STMT_START {
		AV* av;
		if (SvROK($arg) && SvTYPE(SvRV($arg)) == SVt_PVAV) {
			av = (AV*)SvRV($arg);
			av_clear(av);
		} else {
			av = newAV();
			sv_setsv($arg, sv_2mortal(newRV_inc(sv_2mortal((SV*)av))));
		}
		int n = $var.size();
		for (int i = 0; i < n; i++) {
			int m = ${var}[i].size();
			AV* av_vector = newAV();
			for (int j = 0; j < m; j++) {
				AV* av_dmatch = newAV();
				av_push(av_dmatch, newSViv(${var}[i][j].queryIdx));
				av_push(av_dmatch, newSViv(${var}[i][j].trainIdx));
				av_push(av_dmatch, newSViv(${var}[i][j].imgIdx));
				av_push(av_dmatch, newSVnv(${var}[i][j].distance));
				av_push(av_vector, newRV_inc(sv_2mortal((SV*)av_dmatch)));
			}
			av_push(av, newRV_inc(sv_2mortal((SV*)av_vector)));
		}
	} STMT_END;
